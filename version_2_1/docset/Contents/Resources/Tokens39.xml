<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKBlockValueTransformer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKBlockValueTransformer</TokenIdentifier>
			<Abstract type="html">The RKBlockValueTransformer class provides a concrete implementation of the RKValueTransforming protocol using blocks to provide the implementation of the transformer.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
            
			
			<NodeRef refid="39"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKBlockValueTransformer/valueTransformerWithValidationBlock:transformationBlock:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new value transformer with the given validation and transformation blocks. The blocks are used to provide the implementation of the corresponding methods from the RKValueTransforming protocol.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>+ (instancetype)valueTransformerWithValidationBlock:(BOOL ( ^ ) ( Class inputValueClass , Class outputValueClass ))validationBlock transformationBlock:(BOOL ( ^ ) ( id inputValue , id *outputValue , Class outputClass , NSError **error ))transformationBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>validationBlock</Name>
					<Abstract type="html">A block that evaluates whether the transformer can perform a transformation between a given pair of input and output classes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/valueTransformerWithValidationBlock:transformationBlock:</Anchor>
            <NodeRef refid="39"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKBlockValueTransformer/setName:</TokenIdentifier>
			<Abstract type="html">An optional name for the transformer.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="39"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKBlockValueTransformer/name</TokenIdentifier>
			<Abstract type="html">An optional name for the transformer.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="39"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKBlockValueTransformer/name</TokenIdentifier>
			<Abstract type="html">An optional name for the transformer.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="39"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKBlockValueTransformer/transformValue:toValue:ofClass:error:</TokenIdentifier>
			<Abstract type="html">Transforms a given value into a new representation.</Abstract>
			<DeclaredIn>RKValueTransformers.m</DeclaredIn>
			
			<Declaration>- (BOOL)transformValue:(id)inputValue toValue:(__autoreleasing id *)outputValue ofClass:(Class)outputValueClass error:(NSError *__autoreleasing *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>inputValue</Name>
					<Abstract type="html">The value to be transformed.</Abstract>
				</Parameter><Parameter>
					<Name>outputValue</Name>
					<Abstract type="html">A pointer to an id object that will be assigned to the transformed representation. May be assigned to nil if that is the result of the transformation.</Abstract>
				</Parameter><Parameter>
					<Name>outputValueClass</Name>
					<Abstract type="html">The class of the outputValue variable. Specifies the expected type of a successful transformation. May be nil to indicate that the type is unknown or unimportant.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">A pointer to an NSError object that must be assigned to a newly constructed NSError object if the transformation cannot be performed.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A Boolean value indicating if the transformation was successful. This is used to determine whether another transformer should be given an opportunity to attempt a transformation.</Abstract></ReturnValue>
			<Anchor>//api/name/transformValue:toValue:ofClass:error:</Anchor>
            <NodeRef refid="39"/>
		</Token>
		
        
        
	</File>
</Tokens>