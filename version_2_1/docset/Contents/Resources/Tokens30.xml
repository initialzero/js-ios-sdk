<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/JSRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/JSRequest</TokenIdentifier>
			<Abstract type="html">Models the request portion of an HTTP request/response cycle. Used by
&lt;code&gt;JSRESTBase&lt;/code&gt; class to send requests</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
            <Availability type="html"></Availability>
			
			<NodeRef refid="30"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setUri:</TokenIdentifier>
			<Abstract type="html">The URI this request is loading</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *uri</Declaration>
			
			
			<Anchor>//api/name/uri</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/uri</TokenIdentifier>
			<Abstract type="html">The URI this request is loading</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *uri</Declaration>
			
			
			<Anchor>//api/name/uri</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/uri</TokenIdentifier>
			<Abstract type="html">The URI this request is loading</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *uri</Declaration>
			
			
			<Anchor>//api/name/uri</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setBody:</TokenIdentifier>
			<Abstract type="html">The HTTP body used for this request. Uses only for POST and PUT HTTP methods.
Automatically will be serialized as string in the format (i.e XML, JSON, etc.) provided
by the serializer</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) id body</Declaration>
			
			
			<Anchor>//api/name/body</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/body</TokenIdentifier>
			<Abstract type="html">The HTTP body used for this request. Uses only for POST and PUT HTTP methods.
Automatically will be serialized as string in the format (i.e XML, JSON, etc.) provided
by the serializer</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) id body</Declaration>
			
			
			<Anchor>//api/name/body</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/body</TokenIdentifier>
			<Abstract type="html">The HTTP body used for this request. Uses only for POST and PUT HTTP methods.
Automatically will be serialized as string in the format (i.e XML, JSON, etc.) provided
by the serializer</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) id body</Declaration>
			
			
			<Anchor>//api/name/body</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setExpectedModelClass:</TokenIdentifier>
			<Abstract type="html">Expected model class for mapping responce</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) Class&lt;JSSerializationDescriptorHolder&gt; expectedModelClass</Declaration>
			
			
			<Anchor>//api/name/expectedModelClass</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/expectedModelClass</TokenIdentifier>
			<Abstract type="html">Expected model class for mapping responce</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) Class&lt;JSSerializationDescriptorHolder&gt; expectedModelClass</Declaration>
			
			
			<Anchor>//api/name/expectedModelClass</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/expectedModelClass</TokenIdentifier>
			<Abstract type="html">Expected model class for mapping responce</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) Class&lt;JSSerializationDescriptorHolder&gt; expectedModelClass</Declaration>
			
			
			<Anchor>//api/name/expectedModelClass</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setParams:</TokenIdentifier>
			<Abstract type="html">A collection of parameters of the request. Automatically will be added to URL</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDictionary *params</Declaration>
			
			
			<Anchor>//api/name/params</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/params</TokenIdentifier>
			<Abstract type="html">A collection of parameters of the request. Automatically will be added to URL</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDictionary *params</Declaration>
			
			
			<Anchor>//api/name/params</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/params</TokenIdentifier>
			<Abstract type="html">A collection of parameters of the request. Automatically will be added to URL</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSDictionary *params</Declaration>
			
			
			<Anchor>//api/name/params</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setMethod:</TokenIdentifier>
			<Abstract type="html">The HTTP method</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RKRequestMethod method</Declaration>
			
			
			<Anchor>//api/name/method</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/method</TokenIdentifier>
			<Abstract type="html">The HTTP method</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RKRequestMethod method</Declaration>
			
			
			<Anchor>//api/name/method</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/method</TokenIdentifier>
			<Abstract type="html">The HTTP method</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) RKRequestMethod method</Declaration>
			
			
			<Anchor>//api/name/method</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setCompletionBlock:</TokenIdentifier>
			<Abstract type="html">A completionBlock invoke when the request is completed. If block is not
&lt;code&gt;nil&lt;/code&gt;, it will receive request result (instance of
&lt;code&gt;JSOperationResult&lt;/code&gt; class).</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) JSRequestCompletionBlock completionBlock</Declaration>
			
			
			<Anchor>//api/name/completionBlock</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/completionBlock</TokenIdentifier>
			<Abstract type="html">A completionBlock invoke when the request is completed. If block is not
&lt;code&gt;nil&lt;/code&gt;, it will receive request result (instance of
&lt;code&gt;JSOperationResult&lt;/code&gt; class).</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) JSRequestCompletionBlock completionBlock</Declaration>
			
			
			<Anchor>//api/name/completionBlock</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/completionBlock</TokenIdentifier>
			<Abstract type="html">A completionBlock invoke when the request is completed. If block is not
&lt;code&gt;nil&lt;/code&gt;, it will receive request result (instance of
&lt;code&gt;JSOperationResult&lt;/code&gt; class).</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) JSRequestCompletionBlock completionBlock</Declaration>
			
			
			<Anchor>//api/name/completionBlock</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setResponseAsObjects:</TokenIdentifier>
			<Abstract type="html">The responseAsObjects indicates if response result should be serialized and
returned as a list of objects instead plain text</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL responseAsObjects</Declaration>
			
			
			<Anchor>//api/name/responseAsObjects</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/responseAsObjects</TokenIdentifier>
			<Abstract type="html">The responseAsObjects indicates if response result should be serialized and
returned as a list of objects instead plain text</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL responseAsObjects</Declaration>
			
			
			<Anchor>//api/name/responseAsObjects</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/responseAsObjects</TokenIdentifier>
			<Abstract type="html">The responseAsObjects indicates if response result should be serialized and
returned as a list of objects instead plain text</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL responseAsObjects</Declaration>
			
			
			<Anchor>//api/name/responseAsObjects</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setDownloadDestinationPath:</TokenIdentifier>
			<Abstract type="html">The save path of downloaded file. This is an additional parameter which helps
to determine which file will be downloaded (because all requests are asynchronous</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *downloadDestinationPath</Declaration>
			
			
			<Anchor>//api/name/downloadDestinationPath</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/downloadDestinationPath</TokenIdentifier>
			<Abstract type="html">The save path of downloaded file. This is an additional parameter which helps
to determine which file will be downloaded (because all requests are asynchronous</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *downloadDestinationPath</Declaration>
			
			
			<Anchor>//api/name/downloadDestinationPath</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/downloadDestinationPath</TokenIdentifier>
			<Abstract type="html">The save path of downloaded file. This is an additional parameter which helps
to determine which file will be downloaded (because all requests are asynchronous</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, retain) NSString *downloadDestinationPath</Declaration>
			
			
			<Anchor>//api/name/downloadDestinationPath</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setAsynchronous:</TokenIdentifier>
			<Abstract type="html">Determine asynchronous nature of request</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL asynchronous</Declaration>
			
			
			<Anchor>//api/name/asynchronous</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/asynchronous</TokenIdentifier>
			<Abstract type="html">Determine asynchronous nature of request</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL asynchronous</Declaration>
			
			
			<Anchor>//api/name/asynchronous</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/asynchronous</TokenIdentifier>
			<Abstract type="html">Determine asynchronous nature of request</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL asynchronous</Declaration>
			
			
			<Anchor>//api/name/asynchronous</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setRestVersion:</TokenIdentifier>
			<Abstract type="html">The rest version of JasperReports server (affects for URI part)</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) JSRESTVersion restVersion</Declaration>
			
			
			<Anchor>//api/name/restVersion</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/restVersion</TokenIdentifier>
			<Abstract type="html">The rest version of JasperReports server (affects for URI part)</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) JSRESTVersion restVersion</Declaration>
			
			
			<Anchor>//api/name/restVersion</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/restVersion</TokenIdentifier>
			<Abstract type="html">The rest version of JasperReports server (affects for URI part)</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) JSRESTVersion restVersion</Declaration>
			
			
			<Anchor>//api/name/restVersion</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/setRedirectAllowed:</TokenIdentifier>
			<Abstract type="html">The redirectAllowed indicates if request can be redirected</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL redirectAllowed</Declaration>
			
			
			<Anchor>//api/name/redirectAllowed</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/redirectAllowed</TokenIdentifier>
			<Abstract type="html">The redirectAllowed indicates if request can be redirected</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL redirectAllowed</Declaration>
			
			
			<Anchor>//api/name/redirectAllowed</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRequest/redirectAllowed</TokenIdentifier>
			<Abstract type="html">The redirectAllowed indicates if request can be redirected</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL redirectAllowed</Declaration>
			
			
			<Anchor>//api/name/redirectAllowed</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/initWithUri:</TokenIdentifier>
			<Abstract type="html">Returns a request instance with predefined uri.</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>- (id)initWithUri:(NSString *)uri</Declaration>
			<Parameters>
				<Parameter>
					<Name>uri</Name>
					<Abstract type="html">A request uri</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A fully configured JSRequest instance</Abstract></ReturnValue>
			<Anchor>//api/name/initWithUri:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/addParameter:withStringValue:</TokenIdentifier>
			<Abstract type="html">Adds a parameter with a specified string value only if value is not nil or empty</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>- (void)addParameter:(NSString *)parameter withStringValue:(NSString *)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">Parameter name</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">Parameter value</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addParameter:withStringValue:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/addParameter:withIntegerValue:</TokenIdentifier>
			<Abstract type="html">Adds a parameter with a specified integer value only if value is bigger then 0</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>- (void)addParameter:(NSString *)parameter withIntegerValue:(NSInteger)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">Parameter name</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">Parameter value</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addParameter:withIntegerValue:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRequest/addParameter:withArrayValue:</TokenIdentifier>
			<Abstract type="html">Adds a parameter with a specified array value only if value is not nil or empty</Abstract>
			<DeclaredIn>JSRequest.h</DeclaredIn>
			
			<Declaration>- (void)addParameter:(NSString *)parameter withArrayValue:(NSArray *)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>parameter</Name>
					<Abstract type="html">Parameter name</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">Parameter value</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addParameter:withArrayValue:</Anchor>
            <NodeRef refid="30"/>
		</Token>
		
        
        
	</File>
</Tokens>