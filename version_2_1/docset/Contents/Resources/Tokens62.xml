<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKManagedObjectRequestOperation.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKManagedObjectRequestOperation</TokenIdentifier>
			<Abstract type="html">RKManagedObjectRequestOperation is a subclass of RKObjectRequestOperation that implements object mapping on the response body of an NSHTTPResponse loaded via an RKHTTPRequestOperation in which the mapping targets NSManagedObject objects managed by Core Data.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
            
			
			<NodeRef refid="62"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/setManagedObjectContext:</TokenIdentifier>
			<Abstract type="html">The managed object context associated with the managed object request operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/managedObjectContext</TokenIdentifier>
			<Abstract type="html">The managed object context associated with the managed object request operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKManagedObjectRequestOperation/managedObjectContext</TokenIdentifier>
			<Abstract type="html">The managed object context associated with the managed object request operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext</Declaration>
			
			
			<Anchor>//api/name/managedObjectContext</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/setManagedObjectCache:</TokenIdentifier>
			<Abstract type="html">The managed object cache associated with the managed object request operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;RKManagedObjectCaching&gt; managedObjectCache</Declaration>
			
			
			<Anchor>//api/name/managedObjectCache</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/managedObjectCache</TokenIdentifier>
			<Abstract type="html">The managed object cache associated with the managed object request operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;RKManagedObjectCaching&gt; managedObjectCache</Declaration>
			
			
			<Anchor>//api/name/managedObjectCache</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKManagedObjectRequestOperation/managedObjectCache</TokenIdentifier>
			<Abstract type="html">The managed object cache associated with the managed object request operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;RKManagedObjectCaching&gt; managedObjectCache</Declaration>
			
			
			<Anchor>//api/name/managedObjectCache</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/setFetchRequestBlocks:</TokenIdentifier>
			<Abstract type="html">An array of RKFetchRequestBlock block objects used to map NSURL objects into corresponding NSFetchRequest objects.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSArray *fetchRequestBlocks</Declaration>
			
			
			<Anchor>//api/name/fetchRequestBlocks</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/fetchRequestBlocks</TokenIdentifier>
			<Abstract type="html">An array of RKFetchRequestBlock block objects used to map NSURL objects into corresponding NSFetchRequest objects.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSArray *fetchRequestBlocks</Declaration>
			
			
			<Anchor>//api/name/fetchRequestBlocks</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKManagedObjectRequestOperation/fetchRequestBlocks</TokenIdentifier>
			<Abstract type="html">An array of RKFetchRequestBlock block objects used to map NSURL objects into corresponding NSFetchRequest objects.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSArray *fetchRequestBlocks</Declaration>
			
			
			<Anchor>//api/name/fetchRequestBlocks</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/setDeletesOrphanedObjects:</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the receiver will delete orphaned objects upon completion of the operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL deletesOrphanedObjects</Declaration>
			
			
			<Anchor>//api/name/deletesOrphanedObjects</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/deletesOrphanedObjects</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the receiver will delete orphaned objects upon completion of the operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL deletesOrphanedObjects</Declaration>
			
			
			<Anchor>//api/name/deletesOrphanedObjects</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKManagedObjectRequestOperation/deletesOrphanedObjects</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the receiver will delete orphaned objects upon completion of the operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL deletesOrphanedObjects</Declaration>
			
			
			<Anchor>//api/name/deletesOrphanedObjects</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/setSavesToPersistentStore:</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the operation saves the mapping results to the persistent store upon successful completion. If the network transport or mapping portions of the operation fail the operation then this option has no effect.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL savesToPersistentStore</Declaration>
			
			
			<Anchor>//api/name/savesToPersistentStore</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/savesToPersistentStore</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the operation saves the mapping results to the persistent store upon successful completion. If the network transport or mapping portions of the operation fail the operation then this option has no effect.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL savesToPersistentStore</Declaration>
			
			
			<Anchor>//api/name/savesToPersistentStore</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKManagedObjectRequestOperation/savesToPersistentStore</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the operation saves the mapping results to the persistent store upon successful completion. If the network transport or mapping portions of the operation fail the operation then this option has no effect.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL savesToPersistentStore</Declaration>
			
			
			<Anchor>//api/name/savesToPersistentStore</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/setWillSaveMappingContextBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be invoked just before the operation saves the private mapping context.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.h</DeclaredIn>
			
			<Declaration>- (void)setWillSaveMappingContextBlock:(void ( ^ ) ( NSManagedObjectContext *mappingContext ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to execute just before the context is saved.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setWillSaveMappingContextBlock:</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/initWithHTTPRequestOperation:responseDescriptors:</TokenIdentifier>
			<Abstract type="html">Initializes an object request operation with an HTTP request operation and a set of response descriptors.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.m</DeclaredIn>
			
			<Declaration>- (instancetype)initWithHTTPRequestOperation:(RKHTTPRequestOperation *)requestOperation responseDescriptors:(NSArray *)responseDescriptors</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestOperation</Name>
					<Abstract type="html">The request object to be used with the underlying network operation.</Abstract>
				</Parameter><Parameter>
					<Name>responseDescriptors</Name>
					<Abstract type="html">An array of RKResponseDescriptor objects specifying how object mapping is to be performed on the response loaded by the network operation.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given request and response descriptors.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithHTTPRequestOperation:responseDescriptors:</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/dealloc</TokenIdentifier>
			<Abstract type="html">NOTE: This dealloc implementation attempts to avoid crashes coming from Core Data due to the ordering of deallocations under ARC. If the MOC is deallocated before its managed objects, it can trigger a crash. We dispose of the mapping result and reset the private context to avoid this situation. The crash manifests itself in cxx_destruct
[sbw - 2/25/2013]</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.m</DeclaredIn>
			
			<Declaration>- (void)dealloc</Declaration>
			
			
			<Anchor>//api/name/dealloc</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/setTargetObject:</TokenIdentifier>
			<Abstract type="html">The target object for the object mapping operation.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.m</DeclaredIn>
			
			<Declaration>- (void)setTargetObject:(id)targetObject</Declaration>
			
			
			<Anchor>//api/name/setTargetObject:</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/performMappingOnResponseWithCompletionBlock:</TokenIdentifier>
			<Abstract type="html">Performs object mapping using the response and responseData properties.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.m</DeclaredIn>
			
			<Declaration>- (void)performMappingOnResponseWithCompletionBlock:(void ( ^ ) ( RKMappingResult *mappingResult , NSError *error ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">A pointer to an NSError object to be set in the event that the object mapping process has failed.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A mapping result or nil if an error has occurred.</Abstract></ReturnValue>
			<Anchor>//api/name/performMappingOnResponseWithCompletionBlock:</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/saveContextToPersistentStore:error:</TokenIdentifier>
			<Abstract type="html">NOTE: This is more or less a direct port of the functionality provided by [NSManagedObjectContext saveToPersistentStore:] in the RKAdditions category. We have duplicated the logic here to add in support for checking if the operation has been cancelled since we began cascading up the MOC chain. Because each performBlockAndWait: invocation essentially jumps threads and is subject to the availability of the context, it is very possible for the operation to be cancelled during this part of the operation&apos;s lifecycle.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.m</DeclaredIn>
			
			<Declaration>- (BOOL)saveContextToPersistentStore:(NSManagedObjectContext *)contextToSave error:(NSError **)error</Declaration>
			
			
			<Anchor>//api/name/saveContextToPersistentStore:error:</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKManagedObjectRequestOperation/willFinish</TokenIdentifier>
			<Abstract type="html">Invoked to tell the receiver that the object request operation is finishing its work and is about to transition into the finished state. Used to perform any necessary cleanup before the operation is finished.</Abstract>
			<DeclaredIn>RKManagedObjectRequestOperation.m</DeclaredIn>
			
			<Declaration>- (void)willFinish</Declaration>
			
			
			<Anchor>//api/name/willFinish</Anchor>
            <NodeRef refid="62"/>
		</Token>
		
        
        
	</File>
</Tokens>