<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKCompoundValueTransformer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKCompoundValueTransformer</TokenIdentifier>
			<Abstract type="html">The RKCompoundValueTransformer class provides an implementation of the RKValueTransforming protocol in which a collection of underlying value transformers are assembled into a composite value transformer. Compound values transformers are ordered collections in which each underlying transformer is given the opportunity to transform a value in the order in which it appears within the receiver. Compound transformers are copyable, enumerable and support subscripted access to the underlying value transformers.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
            
			
			<NodeRef refid="40"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKCompoundValueTransformer/compoundValueTransformerWithValueTransformers:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new compound transformer from an array of individual value transformers.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>+ (instancetype)compoundValueTransformerWithValueTransformers:(NSArray *)valueTransformers</Declaration>
			<Parameters>
				<Parameter>
					<Name>valueTransformers</Name>
					<Abstract type="html">An array containining an arbitrary number of objects that conform to the RKValueTransforming protocol. Cannot be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new compound transformer initialized with the given collection of underlying transformers.
@raises NSInvalidArgumentException Raised if valueTransformers is nil or any objects in the given collection do not conform to the RKValueTransforming protocol.</Abstract></ReturnValue>
			<Anchor>//api/name/compoundValueTransformerWithValueTransformers:</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKCompoundValueTransformer/addValueTransformer:</TokenIdentifier>
			<Abstract type="html">Adds the given value transformer to the end of the receiver&apos;s transformer collection.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>- (void)addValueTransformer:(id&lt;RKValueTransforming&gt;)valueTransformer</Declaration>
			<Parameters>
				<Parameter>
					<Name>valueTransformer</Name>
					<Abstract type="html">The transformer to add to the receiver.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addValueTransformer:</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKCompoundValueTransformer/removeValueTransformer:</TokenIdentifier>
			<Abstract type="html">Removes the given value transformer from the receiver.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>- (void)removeValueTransformer:(id&lt;RKValueTransforming&gt;)valueTransformer</Declaration>
			<Parameters>
				<Parameter>
					<Name>valueTransformer</Name>
					<Abstract type="html">The transformer to remove from the receiver.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeValueTransformer:</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKCompoundValueTransformer/insertValueTransformer:atIndex:</TokenIdentifier>
			<Abstract type="html">Inserts the given value transformer into the receiver at a specific position. If the transformer already exists within the receiver then it is moved to the specified position.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>- (void)insertValueTransformer:(id&lt;RKValueTransforming&gt;)valueTransformer atIndex:(NSUInteger)index</Declaration>
			<Parameters>
				<Parameter>
					<Name>valueTransformer</Name>
					<Abstract type="html">The value transformer to be added to (or moved within) the receiver.</Abstract>
				</Parameter><Parameter>
					<Name>index</Name>
					<Abstract type="html">The position at which the transformer should be consulted within the collection. An index of 0 would mean that the transformer is consulted before all other transformers.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/insertValueTransformer:atIndex:</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKCompoundValueTransformer/numberOfValueTransformers</TokenIdentifier>
			<Abstract type="html">Returns a count of the number of value transformers in the receiver.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>- (NSUInteger)numberOfValueTransformers</Declaration>
			
			<ReturnValue><Abstract type="html">An integer specifying the number of transformers within the receiver.</Abstract></ReturnValue>
			<Anchor>//api/name/numberOfValueTransformers</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKCompoundValueTransformer/valueTransformersForTransformingFromClass:toClass:</TokenIdentifier>
			<Abstract type="html">Returns a new array containing a subset of the value transformers contained within the receiver that are valid for a transformation between a representation with a given input class and a given output class.</Abstract>
			<DeclaredIn>RKValueTransformers.h</DeclaredIn>
			
			<Declaration>- (NSArray *)valueTransformersForTransformingFromClass:(Class)inputValueClass toClass:(Class)outputValueClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>inputValueClass</Name>
					<Abstract type="html">The class of input values that you wish to retrieve the transformers for. Can only be Nil if outputValueClass is also Nil.</Abstract>
				</Parameter><Parameter>
					<Name>outputValueClass</Name>
					<Abstract type="html">The class of output values that you wish to retrieve the transformers for. Can only be Nil if inputValueClass is also Nil.
@raises NSInvalidArgumentException Raised if Nil is given exclusively for inputValueClass or outputValueClass.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/valueTransformersForTransformingFromClass:toClass:</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKCompoundValueTransformer/transformValue:toValue:ofClass:error:</TokenIdentifier>
			<Abstract type="html">Transforms a given value into a new representation.</Abstract>
			<DeclaredIn>RKValueTransformers.m</DeclaredIn>
			
			<Declaration>- (BOOL)transformValue:(id)inputValue toValue:(__autoreleasing id *)outputValue ofClass:(__unsafe_unretained Class)outputValueClass error:(NSError *__autoreleasing *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>inputValue</Name>
					<Abstract type="html">The value to be transformed.</Abstract>
				</Parameter><Parameter>
					<Name>outputValue</Name>
					<Abstract type="html">A pointer to an id object that will be assigned to the transformed representation. May be assigned to nil if that is the result of the transformation.</Abstract>
				</Parameter><Parameter>
					<Name>outputValueClass</Name>
					<Abstract type="html">The class of the outputValue variable. Specifies the expected type of a successful transformation. May be nil to indicate that the type is unknown or unimportant.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">A pointer to an NSError object that must be assigned to a newly constructed NSError object if the transformation cannot be performed.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A Boolean value indicating if the transformation was successful. This is used to determine whether another transformer should be given an opportunity to attempt a transformation.</Abstract></ReturnValue>
			<Anchor>//api/name/transformValue:toValue:ofClass:error:</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKCompoundValueTransformer/validateTransformationFromClass:toClass:</TokenIdentifier>
			<Abstract type="html">Asks the transformer if it is capable of performing a transformation from a given class into a new representation of another given class.</Abstract>
			<DeclaredIn>RKValueTransformers.m</DeclaredIn>
			
			<Declaration>- (BOOL)validateTransformationFromClass:(Class)sourceClass toClass:(Class)destinationClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>inputValueClass</Name>
					<Abstract type="html">The Class of an input value being inspected.</Abstract>
				</Parameter><Parameter>
					<Name>outputValueClass</Name>
					<Abstract type="html">The Class of an output value being inspected.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the receiver can perform a transformation between the given source and destination classes.</Abstract></ReturnValue>
			<Anchor>//api/name/validateTransformationFromClass:toClass:</Anchor>
            <NodeRef refid="40"/>
		</Token>
		
        
        
	</File>
</Tokens>