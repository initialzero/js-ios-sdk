<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKEntityMapping.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKEntityMapping</TokenIdentifier>
			<Abstract type="html">RKEntityMapping objects model an object mapping with a Core Data destination entity.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
            
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/entity</TokenIdentifier>
		
	</RelatedTokens>
	
			<NodeRef refid="46"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/initWithEntity:</TokenIdentifier>
			<Abstract type="html">Initializes the receiver with a given entity.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithEntity:(NSEntityDescription *)entity</Declaration>
			<Parameters>
				<Parameter>
					<Name>entity</Name>
					<Abstract type="html">An entity with which to initialize the receiver.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given entity.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithEntity:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKEntityMapping/mappingForEntityForName:inManagedObjectStore:</TokenIdentifier>
			<Abstract type="html">A convenience initializer that creates and returns an entity mapping for the entity with the given name in
the managed object model of the given managed object store.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>+ (instancetype)mappingForEntityForName:(NSString *)entityName inManagedObjectStore:(RKManagedObjectStore *)managedObjectStore</Declaration>
			<Parameters>
				<Parameter>
					<Name>entityName</Name>
					<Abstract type="html">The name of the entity in the managed object model for which an entity mapping is to be created.</Abstract>
				</Parameter><Parameter>
					<Name>managedObjectStore</Name>
					<Abstract type="html">A managed object store containing the managed object model in which an entity with the given name is defined.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new entity mapping for the entity with the given name in the managed object model of the given managed object store.</Abstract></ReturnValue>
			<Anchor>//api/name/mappingForEntityForName:inManagedObjectStore:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setEntity:</TokenIdentifier>
			<Abstract type="html">The Core Data entity description used for this object mapping</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSEntityDescription *entity</Declaration>
			
			
			<Anchor>//api/name/entity</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/entity</TokenIdentifier>
			<Abstract type="html">The Core Data entity description used for this object mapping</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSEntityDescription *entity</Declaration>
			
			
			<Anchor>//api/name/entity</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/entity</TokenIdentifier>
			<Abstract type="html">The Core Data entity description used for this object mapping</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSEntityDescription *entity</Declaration>
			
			
			<Anchor>//api/name/entity</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setIdentificationAttributes:</TokenIdentifier>
			<Abstract type="html">The array of NSAttributeDescription objects specifying the attributes of the receiver&apos;s entity that are used during mapping to determine whether an existing object should be updated or a new managed object should be inserted. Please see the &quot;Entity Identification&quot; section of this document for more information.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSArray *identificationAttributes</Declaration>
			
			<ReturnValue><Abstract type="html">An array of identifying attributes or nil if none have been configured.
@raises NSInvalidArgumentException Raised if the setter is invoked with the name of an attribute or an NSAttributeDescription that does not exist in the receiver&apos;s entity. Also raised if the setter is invoked with an empty array.</Abstract></ReturnValue>
			<Anchor>//api/name/identificationAttributes</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/identificationAttributes</TokenIdentifier>
			<Abstract type="html">The array of NSAttributeDescription objects specifying the attributes of the receiver&apos;s entity that are used during mapping to determine whether an existing object should be updated or a new managed object should be inserted. Please see the &quot;Entity Identification&quot; section of this document for more information.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSArray *identificationAttributes</Declaration>
			
			<ReturnValue><Abstract type="html">An array of identifying attributes or nil if none have been configured.
@raises NSInvalidArgumentException Raised if the setter is invoked with the name of an attribute or an NSAttributeDescription that does not exist in the receiver&apos;s entity. Also raised if the setter is invoked with an empty array.</Abstract></ReturnValue>
			<Anchor>//api/name/identificationAttributes</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/identificationAttributes</TokenIdentifier>
			<Abstract type="html">The array of NSAttributeDescription objects specifying the attributes of the receiver&apos;s entity that are used during mapping to determine whether an existing object should be updated or a new managed object should be inserted. Please see the &quot;Entity Identification&quot; section of this document for more information.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSArray *identificationAttributes</Declaration>
			
			<ReturnValue><Abstract type="html">An array of identifying attributes or nil if none have been configured.
@raises NSInvalidArgumentException Raised if the setter is invoked with the name of an attribute or an NSAttributeDescription that does not exist in the receiver&apos;s entity. Also raised if the setter is invoked with an empty array.</Abstract></ReturnValue>
			<Anchor>//api/name/identificationAttributes</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setIdentificationPredicate:</TokenIdentifier>
			<Abstract type="html">An optional predicate used to filter identified objects during mapping.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSPredicate *identificationPredicate</Declaration>
			
			<ReturnValue><Abstract type="html">The identification predicate.</Abstract></ReturnValue>
			<Anchor>//api/name/identificationPredicate</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/identificationPredicate</TokenIdentifier>
			<Abstract type="html">An optional predicate used to filter identified objects during mapping.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSPredicate *identificationPredicate</Declaration>
			
			<ReturnValue><Abstract type="html">The identification predicate.</Abstract></ReturnValue>
			<Anchor>//api/name/identificationPredicate</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/identificationPredicate</TokenIdentifier>
			<Abstract type="html">An optional predicate used to filter identified objects during mapping.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSPredicate *identificationPredicate</Declaration>
			
			<ReturnValue><Abstract type="html">The identification predicate.</Abstract></ReturnValue>
			<Anchor>//api/name/identificationPredicate</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setModificationAttribute:</TokenIdentifier>
			<Abstract type="html">An optional attribute of the receiver&apos;s entity that can be used to detect modification of a given instance. This is used to improve the performance of mapping operations by skipping the property mappings for a given object if it is found to be not modified.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSAttributeDescription *modificationAttribute</Declaration>
			
			
			<Anchor>//api/name/modificationAttribute</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/modificationAttribute</TokenIdentifier>
			<Abstract type="html">An optional attribute of the receiver&apos;s entity that can be used to detect modification of a given instance. This is used to improve the performance of mapping operations by skipping the property mappings for a given object if it is found to be not modified.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSAttributeDescription *modificationAttribute</Declaration>
			
			
			<Anchor>//api/name/modificationAttribute</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/modificationAttribute</TokenIdentifier>
			<Abstract type="html">An optional attribute of the receiver&apos;s entity that can be used to detect modification of a given instance. This is used to improve the performance of mapping operations by skipping the property mappings for a given object if it is found to be not modified.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSAttributeDescription *modificationAttribute</Declaration>
			
			
			<Anchor>//api/name/modificationAttribute</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setModificationAttributeForName:</TokenIdentifier>
			<Abstract type="html">Sets the modificationAttribute to the receiver to the attribute with the specified name.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>- (void)setModificationAttributeForName:(NSString *)attributeName</Declaration>
			<Parameters>
				<Parameter>
					<Name>attributeName</Name>
					<Abstract type="html">The name of an attribute in the entity of the receiver.
@raises NSInvalidArgumentException Raised if no attribute could be found with the given name.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setModificationAttributeForName:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setPersistentStore:</TokenIdentifier>
			<Abstract type="html">The persistent store in which new object instances mapped with the receiver should be inserted.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSPersistentStore *persistentStore</Declaration>
			
			
			<Anchor>//api/name/persistentStore</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/persistentStore</TokenIdentifier>
			<Abstract type="html">The persistent store in which new object instances mapped with the receiver should be inserted.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSPersistentStore *persistentStore</Declaration>
			
			
			<Anchor>//api/name/persistentStore</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/persistentStore</TokenIdentifier>
			<Abstract type="html">The persistent store in which new object instances mapped with the receiver should be inserted.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) NSPersistentStore *persistentStore</Declaration>
			
			
			<Anchor>//api/name/persistentStore</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setConnections:</TokenIdentifier>
			<Abstract type="html">Returns the array of RKConnectionDescripton objects configured for connecting relationships during object mapping.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSArray *connections</Declaration>
			
			
			<Anchor>//api/name/connections</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/connections</TokenIdentifier>
			<Abstract type="html">Returns the array of RKConnectionDescripton objects configured for connecting relationships during object mapping.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSArray *connections</Declaration>
			
			
			<Anchor>//api/name/connections</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/connections</TokenIdentifier>
			<Abstract type="html">Returns the array of RKConnectionDescripton objects configured for connecting relationships during object mapping.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSArray *connections</Declaration>
			
			
			<Anchor>//api/name/connections</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/addConnection:</TokenIdentifier>
			<Abstract type="html">Adds a connection to the receiver.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>- (void)addConnection:(RKConnectionDescription *)connection</Declaration>
			<Parameters>
				<Parameter>
					<Name>connection</Name>
					<Abstract type="html">The connection to be added.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addConnection:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/removeConnection:</TokenIdentifier>
			<Abstract type="html">Removes a connection from the receiver.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>- (void)removeConnection:(RKConnectionDescription *)connection</Declaration>
			<Parameters>
				<Parameter>
					<Name>connection</Name>
					<Abstract type="html">The connection to be removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeConnection:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/addConnectionForRelationship:connectedBy:</TokenIdentifier>
			<Abstract type="html">Adds a connection for the specified relationship connected using the attributes specified by the given NSString, NSArray, or NSDictionary object.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/RKObjectMapping/sourceToDestinationKeyTransformationBlock</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)addConnectionForRelationship:(id)relationshipOrName connectedBy:(id)connectionSpecifier</Declaration>
			<Parameters>
				<Parameter>
					<Name>relationshipOrName</Name>
					<Abstract type="html">The relationship object or name of the relationship object that is to be connected.</Abstract>
				</Parameter><Parameter>
					<Name>connectionSpecifier</Name>
					<Abstract type="html">An NSString, NSArray, or NSDictionary object specifying how the relationship is to be connected by matching attributes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addConnectionForRelationship:connectedBy:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/connectionForRelationship:</TokenIdentifier>
			<Abstract type="html">Returns the connection for the specified relationship.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>- (RKConnectionDescription *)connectionForRelationship:(id)relationshipOrName</Declaration>
			<Parameters>
				<Parameter>
					<Name>relationshipOrName</Name>
					<Abstract type="html">The relationship object or name of the relationship object for which to retrieve the connection.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The connection object for the specified relationship or nil if none is configured.</Abstract></ReturnValue>
			<Anchor>//api/name/connectionForRelationship:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setDiscardsInvalidObjectsOnInsert:</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if newly created NSManagedObject instances mapped with the receiver should be discarded when they fail validateForInsert:.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL discardsInvalidObjectsOnInsert</Declaration>
			
			
			<Anchor>//api/name/discardsInvalidObjectsOnInsert</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/discardsInvalidObjectsOnInsert</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if newly created NSManagedObject instances mapped with the receiver should be discarded when they fail validateForInsert:.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL discardsInvalidObjectsOnInsert</Declaration>
			
			
			<Anchor>//api/name/discardsInvalidObjectsOnInsert</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/discardsInvalidObjectsOnInsert</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if newly created NSManagedObject instances mapped with the receiver should be discarded when they fail validateForInsert:.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL discardsInvalidObjectsOnInsert</Declaration>
			
			
			<Anchor>//api/name/discardsInvalidObjectsOnInsert</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/setDeletionPredicate:</TokenIdentifier>
			<Abstract type="html">A predicate that identifies objects for the receiver&apos;s entity that are to be deleted from the local store.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSPredicate *deletionPredicate</Declaration>
			
			
			<Anchor>//api/name/deletionPredicate</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/deletionPredicate</TokenIdentifier>
			<Abstract type="html">A predicate that identifies objects for the receiver&apos;s entity that are to be deleted from the local store.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSPredicate *deletionPredicate</Declaration>
			
			
			<Anchor>//api/name/deletionPredicate</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/deletionPredicate</TokenIdentifier>
			<Abstract type="html">A predicate that identifies objects for the receiver&apos;s entity that are to be deleted from the local store.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSPredicate *deletionPredicate</Declaration>
			
			
			<Anchor>//api/name/deletionPredicate</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/defaultValueForAttribute:</TokenIdentifier>
			<Abstract type="html">Returns the default value for the specified attribute as expressed in the Core Data entity definition. This value will
be assigned if the object mapping is applied and a value for a missing attribute is not present in the payload.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>- (id)defaultValueForAttribute:(NSString *)attributeName</Declaration>
			
			
			<Anchor>//api/name/defaultValueForAttribute:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKEntityMapping/setEntityIdentificationInferenceEnabled:</TokenIdentifier>
			<Abstract type="html">Enables or disabled entity identification inference.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>+ (void)setEntityIdentificationInferenceEnabled:(BOOL)enabled</Declaration>
			<Parameters>
				<Parameter>
					<Name>enabled</Name>
					<Abstract type="html">A Boolean value indicating if entity identification inference is to be performed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setEntityIdentificationInferenceEnabled:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKEntityMapping/isEntityIdentificationInferenceEnabled</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value that indicates if entity identification inference has been enabled.</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isEntityIdentificationInferenceEnabled</Declaration>
			
			<ReturnValue><Abstract type="html">YES if entity identification inference is enabled, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/isEntityIdentificationInferenceEnabled</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKEntityMapping/mappingForClass:</TokenIdentifier>
			<Abstract type="html">Returns an object mapping for the specified class that is ready for configuration</Abstract>
			<DeclaredIn>RKEntityMapping.m</DeclaredIn>
			
			<Declaration>+ (instancetype)mappingForClass:(Class)objectClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectClass</Name>
					<Abstract type="html">The class that the mapping targets.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new mapping object.</Abstract></ReturnValue>
			<Anchor>//api/name/mappingForClass:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/initWithClass:</TokenIdentifier>
			<Abstract type="html">Initializes the receiver with a given object class. This is the designated initializer.</Abstract>
			<DeclaredIn>RKEntityMapping.m</DeclaredIn>
			
			<Declaration>- (instancetype)initWithClass:(Class)objectClass</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectClass</Name>
					<Abstract type="html">The class that the mapping targets. Cannot be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given class.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithClass:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/classForProperty:</TokenIdentifier>
			<Abstract type="html">Returns the class of the attribute or relationship property of the target objectClass with the given name.</Abstract>
			<DeclaredIn>RKEntityMapping.m</DeclaredIn>
			
			<Declaration>- (Class)classForProperty:(NSString *)propertyName</Declaration>
			<Parameters>
				<Parameter>
					<Name>propertyName</Name>
					<Abstract type="html">The name of the property we would like to retrieve the type of.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The class of the property.</Abstract></ReturnValue>
			<Anchor>//api/name/classForProperty:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/classForKeyPath:</TokenIdentifier>
			<Abstract type="html">Returns the class of the attribute or relationship property of the target objectClass at the given key path.</Abstract>
			<DeclaredIn>RKEntityMapping.m</DeclaredIn>
			
			<Declaration>- (Class)classForKeyPath:(NSString *)keyPath</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The name of the property we would like to retrieve the type of.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The class of the property at the given key path.</Abstract></ReturnValue>
			<Anchor>//api/name/classForKeyPath:</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/set:</TokenIdentifier>
			<Abstract type="html">Deprecated in v0.21.0</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/RKObjectMapping/defaultDateFormatters</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, copy) NSString *DEPRECATED_ATTRIBUTE_MESSAGE ( &quot;Use `setModificationAttributeForName:` instead&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKEntityMapping/)</TokenIdentifier>
			<Abstract type="html">Deprecated in v0.21.0</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/RKObjectMapping/defaultDateFormatters</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, copy) NSString *DEPRECATED_ATTRIBUTE_MESSAGE ( &quot;Use `setModificationAttributeForName:` instead&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKEntityMapping/)</TokenIdentifier>
			<Abstract type="html">Deprecated in v0.21.0</Abstract>
			<DeclaredIn>RKEntityMapping.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/clm/RKObjectMapping/defaultDateFormatters</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, copy) NSString *DEPRECATED_ATTRIBUTE_MESSAGE ( &quot;Use `setModificationAttributeForName:` instead&quot; )</Declaration>
			
			
			<Anchor>//api/name/)</Anchor>
            <NodeRef refid="46"/>
		</Token>
		
        
        
	</File>
</Tokens>