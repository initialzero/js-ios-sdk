<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKHTTPRequestOperation.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKHTTPRequestOperation</TokenIdentifier>
			<Abstract type="html">The RKHTTPRequestOperation class is a subclass of AFHTTPRequestOperation for HTTP or HTTPS requests made by RestKit. It provides per-instance configuration of the acceptable status codes and content types and integrates with the RKLog system to provide detailed requested and response logging. Instances of RKHTTPRequest are created by RKObjectRequestOperation and its subclasses to HTTP requests that will be object mapped. When used to make standalone HTTP requests, RKHTTPRequestOperation instance behave identically to AFHTTPRequestOperation with the exception of emitting logging information.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.h</DeclaredIn>
            
			
			<NodeRef refid="50"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKHTTPRequestOperation/setAcceptableStatusCodes:</TokenIdentifier>
			<Abstract type="html">The set of status codes which the operation considers successful.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSIndexSet *acceptableStatusCodes</Declaration>
			
			
			<Anchor>//api/name/acceptableStatusCodes</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKHTTPRequestOperation/acceptableStatusCodes</TokenIdentifier>
			<Abstract type="html">The set of status codes which the operation considers successful.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSIndexSet *acceptableStatusCodes</Declaration>
			
			
			<Anchor>//api/name/acceptableStatusCodes</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKHTTPRequestOperation/acceptableStatusCodes</TokenIdentifier>
			<Abstract type="html">The set of status codes which the operation considers successful.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSIndexSet *acceptableStatusCodes</Declaration>
			
			
			<Anchor>//api/name/acceptableStatusCodes</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKHTTPRequestOperation/setAcceptableContentTypes:</TokenIdentifier>
			<Abstract type="html">The set of content types which the operation considers successful.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSSet *acceptableContentTypes</Declaration>
			
			
			<Anchor>//api/name/acceptableContentTypes</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKHTTPRequestOperation/acceptableContentTypes</TokenIdentifier>
			<Abstract type="html">The set of content types which the operation considers successful.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSSet *acceptableContentTypes</Declaration>
			
			
			<Anchor>//api/name/acceptableContentTypes</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKHTTPRequestOperation/acceptableContentTypes</TokenIdentifier>
			<Abstract type="html">The set of content types which the operation considers successful.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSSet *acceptableContentTypes</Declaration>
			
			
			<Anchor>//api/name/acceptableContentTypes</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKHTTPRequestOperation/canProcessRequest:</TokenIdentifier>
			<Abstract type="html">A Boolean value determining whether or not the class can process the specified request. For example, AFJSONRequestOperation may check to make sure the content type was application/json or the URL path extension was .json.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.m</DeclaredIn>
			
			<Declaration>+ (BOOL)canProcessRequest:(NSURLRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>urlRequest</Name>
					<Abstract type="html">The request that is determined to be supported or not supported for this class.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/canProcessRequest:</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKHTTPRequestOperation/hasAcceptableStatusCode</TokenIdentifier>
			<Abstract type="html">A Boolean value that corresponds to whether the status code of the response is within the specified set of acceptable status codes. Returns YES if acceptableStatusCodes is nil.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.m</DeclaredIn>
			
			<Declaration>- (BOOL)hasAcceptableStatusCode</Declaration>
			
			
			<Anchor>//api/name/hasAcceptableStatusCode</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKHTTPRequestOperation/hasAcceptableContentType</TokenIdentifier>
			<Abstract type="html">A Boolean value that corresponds to whether the MIME type of the response is among the specified set of acceptable content types. Returns YES if acceptableContentTypes is nil.</Abstract>
			<DeclaredIn>RKHTTPRequestOperation.m</DeclaredIn>
			
			<Declaration>- (BOOL)hasAcceptableContentType</Declaration>
			
			
			<Anchor>//api/name/hasAcceptableContentType</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKHTTPRequestOperation/error</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>RKHTTPRequestOperation.m</DeclaredIn>
			
			<Declaration>- (NSError *)error</Declaration>
			
			
			<Anchor>//api/name/error</Anchor>
            <NodeRef refid="50"/>
		</Token>
		
        
        
	</File>
</Tokens>