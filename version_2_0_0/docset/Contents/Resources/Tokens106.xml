<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TKState.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TKState</TokenIdentifier>
			<Abstract type="html">The TKState class defines a particular state with a state machine. Each state must have a unique name within the state machine in which it is used.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
            
			
			<NodeRef refid="106"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TKState/stateWithName:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new state object with the specified name.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>+ (instancetype)stateWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the state. Cannot be blank.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A newly created state object with the specified name.</Abstract></ReturnValue>
			<Anchor>//api/name/stateWithName:</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKState/setName:</TokenIdentifier>
			<Abstract type="html">The name of the receiver. Cannot be nil and must be unique within the state machine that the receiver is added to.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKState/name</TokenIdentifier>
			<Abstract type="html">The name of the receiver. Cannot be nil and must be unique within the state machine that the receiver is added to.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKState/name</TokenIdentifier>
			<Abstract type="html">The name of the receiver. Cannot be nil and must be unique within the state machine that the receiver is added to.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKState/setWillEnterStateBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed before the state machine transitions into the state modeled by the receiver.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>- (void)setWillEnterStateBlock:(void ( ^ ) ( TKState *state , TKTransition *transition ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to executed before a state machine enters the receiver&apos;s state. The block has no return value and takes two arguments: the state object and a transition object modeling the state change.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setWillEnterStateBlock:</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKState/setDidEnterStateBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed after the state machine has transitioned into the state modeled by the receiver.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>- (void)setDidEnterStateBlock:(void ( ^ ) ( TKState *state , TKTransition *transition ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to executed after a state machine enters the receiver&apos;s state. The block has no return value and takes two arguments: the state object and a transition object modeling the state change.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDidEnterStateBlock:</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKState/setWillExitStateBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed before the state machine transitions out of the state modeled by the receiver.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>- (void)setWillExitStateBlock:(void ( ^ ) ( TKState *state , TKTransition *transition ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to executed before a state machine exits the receiver&apos;s state. The block has no return value and takes two arguments: the state object and a transition object modeling the state change.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setWillExitStateBlock:</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKState/setDidExitStateBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed after the state machine has transitioned out of the state modeled by the receiver.</Abstract>
			<DeclaredIn>TKState.h</DeclaredIn>
			
			<Declaration>- (void)setDidExitStateBlock:(void ( ^ ) ( TKState *state , TKTransition *transition ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to executed after a state machine exit the receiver&apos;s state. The block has no return value and takes two arguments: the state object and a transition object modeling the state change.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDidExitStateBlock:</Anchor>
            <NodeRef refid="106"/>
		</Token>
		
        
        
	</File>
</Tokens>