<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/JSRESTBase.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/JSRESTBase</TokenIdentifier>
			<Abstract type="html">Provides methods which interacts with the JasperReports Server REST API. The
object puts at disposal a set of methods for sending JSRequests for different
API parts, different types of cancel request(s). To send a proper request to
server JSRequest instance should be configured. For this purposes JSRESTResource,
JSRESTReport helper classes was provided which do all this configuration in easier
way for specific API parts (i.e. repository, reports etc.)
@todo Provide helper classes for job and administration services</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
            <Availability type="html"></Availability>
			
			<NodeRef refid="22"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/setServerProfile:</TokenIdentifier>
			<Abstract type="html">The server profile instance contains connection details for
JasperReports server</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) JSProfile *serverProfile</Declaration>
			
			
			<Anchor>//api/name/serverProfile</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/serverProfile</TokenIdentifier>
			<Abstract type="html">The server profile instance contains connection details for
JasperReports server</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) JSProfile *serverProfile</Declaration>
			
			
			<Anchor>//api/name/serverProfile</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRESTBase/serverProfile</TokenIdentifier>
			<Abstract type="html">The server profile instance contains connection details for
JasperReports server</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) JSProfile *serverProfile</Declaration>
			
			
			<Anchor>//api/name/serverProfile</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/setTimeoutInterval:</TokenIdentifier>
			<Abstract type="html">The timeout interval which will be used as default value for all requests if
they does not provide its own timeout interval</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval timeoutInterval</Declaration>
			
			
			<Anchor>//api/name/timeoutInterval</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/timeoutInterval</TokenIdentifier>
			<Abstract type="html">The timeout interval which will be used as default value for all requests if
they does not provide its own timeout interval</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval timeoutInterval</Declaration>
			
			
			<Anchor>//api/name/timeoutInterval</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRESTBase/timeoutInterval</TokenIdentifier>
			<Abstract type="html">The timeout interval which will be used as default value for all requests if
they does not provide its own timeout interval</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval timeoutInterval</Declaration>
			
			
			<Anchor>//api/name/timeoutInterval</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/setCookies:</TokenIdentifier>
			<Abstract type="html">An NSArray of NSHTTPCookie objects</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *cookies</Declaration>
			
			
			<Anchor>//api/name/cookies</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/cookies</TokenIdentifier>
			<Abstract type="html">An NSArray of NSHTTPCookie objects</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *cookies</Declaration>
			
			
			<Anchor>//api/name/cookies</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRESTBase/cookies</TokenIdentifier>
			<Abstract type="html">An NSArray of NSHTTPCookie objects</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *cookies</Declaration>
			
			
			<Anchor>//api/name/cookies</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/setRestKitObjectManager:</TokenIdentifier>
			<Abstract type="html">RestKit&apos;s RKObjectManager instance for mapping response (in JSON, XML and other formats) directly to object</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RKObjectManager *restKitObjectManager</Declaration>
			
			
			<Anchor>//api/name/restKitObjectManager</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/restKitObjectManager</TokenIdentifier>
			<Abstract type="html">RestKit&apos;s RKObjectManager instance for mapping response (in JSON, XML and other formats) directly to object</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RKObjectManager *restKitObjectManager</Declaration>
			
			
			<Anchor>//api/name/restKitObjectManager</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRESTBase/restKitObjectManager</TokenIdentifier>
			<Abstract type="html">RestKit&apos;s RKObjectManager instance for mapping response (in JSON, XML and other formats) directly to object</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RKObjectManager *restKitObjectManager</Declaration>
			
			
			<Anchor>//api/name/restKitObjectManager</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/setKeepSession:</TokenIdentifier>
			<Abstract type="html">If YES REST Client will try to recreate HTTP session.</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) BOOL keepSession</Declaration>
			
			
			<Anchor>//api/name/keepSession</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/keepSession</TokenIdentifier>
			<Abstract type="html">If YES REST Client will try to recreate HTTP session.</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) BOOL keepSession</Declaration>
			
			
			<Anchor>//api/name/keepSession</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/JSRESTBase/keepSession</TokenIdentifier>
			<Abstract type="html">If YES REST Client will try to recreate HTTP session.</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) BOOL keepSession</Declaration>
			
			
			<Anchor>//api/name/keepSession</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/initWithServerProfile:keepLogged:</TokenIdentifier>
			<Abstract type="html">Returns a rest base instance.</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithServerProfile:(JSProfile *)serverProfile keepLogged:(BOOL)keepLogged</Declaration>
			<Parameters>
				<Parameter>
					<Name>serverProfile</Name>
					<Abstract type="html">The server profile instance contains connection details for JasperReports server</Abstract>
				</Parameter><Parameter>
					<Name>keepLogged</Name>
					<Abstract type="html">If YES REST Client will try to recreate HTTP session</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A fully configured JSRESTBase instance</Abstract></ReturnValue>
			<Anchor>//api/name/initWithServerProfile:keepLogged:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/sendRequest:</TokenIdentifier>
			<Abstract type="html">Sends asynchronous request. Result will be passed as &lt;code&gt;JSOperationResult&lt;/code&gt;
instance to completionBlock provided in
&lt;code&gt;JSRequest&lt;/code&gt; object</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (void)sendRequest:(JSRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">Models the request portion of an HTTP request/response cycle.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendRequest:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/sendRequest:additionalHTTPHeaderFields:</TokenIdentifier>
			<Abstract type="html">Sends asynchronous request. Result will be passed as &lt;code&gt;JSOperationResult&lt;/code&gt;
instance to completionBlock provided in
&lt;code&gt;JSRequest&lt;/code&gt; object</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (void)sendRequest:(JSRequest *)jsRequest additionalHTTPHeaderFields:(NSDictionary *)headerFields</Declaration>
			<Parameters>
				<Parameter>
					<Name>jsRequest</Name>
					<Abstract type="html">Models the request portion of an HTTP request/response cycle.</Abstract>
				</Parameter><Parameter>
					<Name>headerFields</Name>
					<Abstract type="html">Additional HTTP header fields for sending request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendRequest:additionalHTTPHeaderFields:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/serverInfo</TokenIdentifier>
			<Abstract type="html">Gets server information details</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (JSServerInfo *)serverInfo</Declaration>
			
			<ReturnValue><Abstract type="html">the ServerInfo value</Abstract></ReturnValue>
			<Anchor>//api/name/serverInfo</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/isNetworkReachable</TokenIdentifier>
			<Abstract type="html">Checks if network is available</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (BOOL)isNetworkReachable</Declaration>
			
			<ReturnValue><Abstract type="html">A boolean value represents network is availability</Abstract></ReturnValue>
			<Anchor>//api/name/isNetworkReachable</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/cancelAllRequests</TokenIdentifier>
			<Abstract type="html">Cancels all requests</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (void)cancelAllRequests</Declaration>
			
			
			<Anchor>//api/name/cancelAllRequests</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/isRequestPoolEmpty</TokenIdentifier>
			<Abstract type="html">Check if request pool is empty (no any active request exists)</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (BOOL)isRequestPoolEmpty</Declaration>
			
			<ReturnValue><Abstract type="html">YES if request pool is empty, otherwise returns NO</Abstract></ReturnValue>
			<Anchor>//api/name/isRequestPoolEmpty</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/deleteCookies</TokenIdentifier>
			<Abstract type="html">Deletes all cookies for specified server</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (void)deleteCookies</Declaration>
			
			
			<Anchor>//api/name/deleteCookies</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/resetReachabilityStatus</TokenIdentifier>
			<Abstract type="html">Reset reachability to server status</Abstract>
			<DeclaredIn>JSRESTBase.h</DeclaredIn>
			
			<Declaration>- (void)resetReachabilityStatus</Declaration>
			
			
			<Anchor>//api/name/resetReachabilityStatus</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/isSessionAuthorized</TokenIdentifier>
			<Abstract type="html">Checks if session is authorized</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTSession.h</DeclaredIn>
			
			<Declaration>- (BOOL)isSessionAuthorized</Declaration>
			
			<ReturnValue><Abstract type="html">A boolean value represents session is authorized</Abstract></ReturnValue>
			<Anchor>//api/name/isSessionAuthorized</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/createResource:completionBlock:</TokenIdentifier>
			<Abstract type="html">Creates the resource with specified JSResourceDescriptor</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTResource.h</DeclaredIn>
			
			<Declaration>- (void)createResource:(JSResourceDescriptor *)resource completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>resource</Name>
					<Abstract type="html">JSResourceDescriptor of resource being modified</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createResource:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/modifyResource:completionBlock:</TokenIdentifier>
			<Abstract type="html">Modifies the resource with specified JSResourceDescriptor</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTResource.h</DeclaredIn>
			
			<Declaration>- (void)modifyResource:(JSResourceDescriptor *)resource completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>resource</Name>
					<Abstract type="html">JSResourceDescriptor of resource being modified</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/modifyResource:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/deleteResource:completionBlock:</TokenIdentifier>
			<Abstract type="html">Deletes the resource with the specified URI</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTResource.h</DeclaredIn>
			
			<Declaration>- (void)deleteResource:(NSString *)uri completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>uri</Name>
					<Abstract type="html">The repository URI (i.e. /reports/samples/)</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteResource:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/resourceLookupForURI:resourceType:completionBlock:</TokenIdentifier>
			<Abstract type="html">Gets resource lookup for resource.</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTResource.h</DeclaredIn>
			
			<Declaration>- (void)resourceLookupForURI:(NSString *)resourceURI resourceType:(NSString *)resourceType completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>resourceURI</Name>
					<Abstract type="html">The repository URI (i.e. /reports/samples/)</Abstract>
				</Parameter><Parameter>
					<Name>resourceType</Name>
					<Abstract type="html">Type of required resource</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/resourceLookupForURI:resourceType:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/resourceLookups:query:types:recursive:offset:limit:completionBlock:</TokenIdentifier>
			<Abstract type="html">Gets the list of resource lookups for the resources available in the specified
folder and matching the specified parameters</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTResource.h</DeclaredIn>
			
			<Declaration>- (void)resourceLookups:(NSString *)folderUri query:(NSString *)query types:(NSArray *)types recursive:(BOOL)recursive offset:(NSInteger)offset limit:(NSInteger)limit completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>folderUri</Name>
					<Abstract type="html">The repository URI (i.e. /reports/samples/)</Abstract>
				</Parameter><Parameter>
					<Name>query</Name>
					<Abstract type="html">Match only resources having the specified text in the name or
description (can be &lt;code&gt;nil&lt;/code&gt;)</Abstract>
				</Parameter><Parameter>
					<Name>types</Name>
					<Abstract type="html">Match only resources of the given types (can be &lt;code&gt;nil&lt;/code&gt;)</Abstract>
				</Parameter><Parameter>
					<Name>recursive</Name>
					<Abstract type="html">Get the resources recursively (can be &lt;code&gt;nil&lt;/code&gt;)</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">Start index for requested page</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">The maximum number of items returned to the client. The default
is 0 (can be &lt;code&gt;nil&lt;/code&gt;), meaning no limit</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/resourceLookups:query:types:recursive:offset:limit:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/resourceLookups:query:types:sortBy:recursive:offset:limit:completionBlock:</TokenIdentifier>
			<Abstract type="html">Gets the list of resource lookups for the resources available in the specified
folder and matching the specified parameters</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTResource.h</DeclaredIn>
			
			<Declaration>- (void)resourceLookups:(NSString *)folderUri query:(NSString *)query types:(NSArray *)types sortBy:(NSString *)sortBy recursive:(BOOL)recursive offset:(NSInteger)offset limit:(NSInteger)limit completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>folderUri</Name>
					<Abstract type="html">The repository URI (i.e. /reports/samples/)</Abstract>
				</Parameter><Parameter>
					<Name>query</Name>
					<Abstract type="html">Match only resources having the specified text in the name or
description (can be &lt;code&gt;nil&lt;/code&gt;)</Abstract>
				</Parameter><Parameter>
					<Name>types</Name>
					<Abstract type="html">Match only resources of the given types (can be &lt;code&gt;nil&lt;/code&gt;)</Abstract>
				</Parameter><Parameter>
					<Name>sortBy</Name>
					<Abstract type="html">Represents a field in the results to sort by: uri, label, description,
type, creationDate, updateDate, accessTime, or popularity (based on access events).</Abstract>
				</Parameter><Parameter>
					<Name>recursive</Name>
					<Abstract type="html">Get the resources recursively (can be &lt;code&gt;nil&lt;/code&gt;)</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">Start index for requested page</Abstract>
				</Parameter><Parameter>
					<Name>limit</Name>
					<Abstract type="html">The maximum number of items returned to the client. The default
is 0 (can be &lt;code&gt;nil&lt;/code&gt;), meaning no limit</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/resourceLookups:query:types:sortBy:recursive:offset:limit:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/generateReportUrl:page:format:</TokenIdentifier>
			<Abstract type="html">Generates the report url according to specified parameters. The new v2/reports
service allows clients to receive report output in a single request-response
using this url.</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (NSString *)generateReportUrl:(JSResourceDescriptor *)resourceDescriptor page:(NSInteger)page format:(NSString *)format</Declaration>
			<Parameters>
				<Parameter>
					<Name>resourceDescriptor</Name>
					<Abstract type="html">resource descriptor of this report with included list of
report parameter/input control values (list of JSResourceParameter inside descriptor)</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">a positive integer value used to output a specific page or 0 to output all pages</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">the format of the report output. Possible values: PDF, HTML, XLS, RTF, CSV, XML.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the report url</Abstract></ReturnValue>
			<Anchor>//api/name/generateReportUrl:page:format:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/generateReportUrl:reportParams:page:format:</TokenIdentifier>
			<Abstract type="html">Generates the report url to receive all pages report output in HTML format.</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (NSString *)generateReportUrl:(NSString *)uri reportParams:(NSDictionary *)reportParams page:(NSInteger)page format:(NSString *)format</Declaration>
			<Parameters>
				<Parameter>
					<Name>uri</Name>
					<Abstract type="html">The resource descriptor uri</Abstract>
				</Parameter><Parameter>
					<Name>reportParams</Name>
					<Abstract type="html">list of report parameter/input control values</Abstract>
				</Parameter><Parameter>
					<Name>page</Name>
					<Abstract type="html">a positive integer value used to output a specific page or 0 to output all pages</Abstract>
				</Parameter><Parameter>
					<Name>format</Name>
					<Abstract type="html">the format of the report output. Possible values: PDF, HTML, XLS, RTF, CSV, XML.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the report url</Abstract></ReturnValue>
			<Anchor>//api/name/generateReportUrl:reportParams:page:format:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/inputControlsForReport:ids:selectedValues:completionBlock:</TokenIdentifier>
			<Abstract type="html">Gets the list of states of input controls with specified IDs for the report with specified URI and according to selected values</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)inputControlsForReport:(NSString *)reportUri ids:(NSArray *)ids selectedValues:(NSArray *)selectedValues completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>reportUri</Name>
					<Abstract type="html">repository URI of the report</Abstract>
				</Parameter><Parameter>
					<Name>ids</Name>
					<Abstract type="html">list of input controls IDs</Abstract>
				</Parameter><Parameter>
					<Name>selectedValues</Name>
					<Abstract type="html">list of input controls selected values</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/inputControlsForReport:ids:selectedValues:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/updatedInputControlsValues:ids:selectedValues:completionBlock:</TokenIdentifier>
			<Abstract type="html">Gets the states with updated values for input controls with specified IDs and according to selected values</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)updatedInputControlsValues:(NSString *)reportUri ids:(NSArray *)ids selectedValues:(NSArray *)selectedValues completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>reportUri</Name>
					<Abstract type="html">repository URI of the report</Abstract>
				</Parameter><Parameter>
					<Name>ids</Name>
					<Abstract type="html">list of input controls IDs</Abstract>
				</Parameter><Parameter>
					<Name>selectedValues</Name>
					<Abstract type="html">list of input controls selected values</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updatedInputControlsValues:ids:selectedValues:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/runReportExecution:async:outputFormat:interactive:freshData:saveDataSnapshot:ignorePagination:transformerKey:pages:attachmentsPrefix:parameters:completionBlock:</TokenIdentifier>
			<Abstract type="html">Executes report</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)runReportExecution:(NSString *)reportUnitUri async:(BOOL)async outputFormat:(NSString *)outputFormat interactive:(BOOL)interactive freshData:(BOOL)freshData saveDataSnapshot:(BOOL)saveDataSnapshot ignorePagination:(BOOL)ignorePagination transformerKey:(NSString *)transformerKey pages:(NSString *)pages attachmentsPrefix:(NSString *)attachmentsPrefix parameters:(NSArray *)parameters completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>reportUnitUri</Name>
					<Abstract type="html">URI of the report to run</Abstract>
				</Parameter><Parameter>
					<Name>async</Name>
					<Abstract type="html">If false, then response is send, when report generation/export is complete, else, response is send immediately, without waiting for completeness</Abstract>
				</Parameter><Parameter>
					<Name>outputFormat</Name>
					<Abstract type="html">Report output format (e.g. html, pdf etc.)</Abstract>
				</Parameter><Parameter>
					<Name>interactive</Name>
					<Abstract type="html">If true, then highcharts are present, then they are generated using JavaScript, else image with chart is generated</Abstract>
				</Parameter><Parameter>
					<Name>freshData</Name>
					<Abstract type="html">Used to specify whether the report should use a previously saved data snapshot (if any) or fetch fresh data from the data source.  By default, if a saved data snapshot exists for the report it will be used when running the report</Abstract>
				</Parameter><Parameter>
					<Name>saveDataSnapshot</Name>
					<Abstract type="html">Used to instruct JRS to fetch fresh data for the report and save it as a data snapshot.  Note that data snapshot persistence must be enabled on the JRS instance in order for this parameter to be effective</Abstract>
				</Parameter><Parameter>
					<Name>ignorePagination</Name>
					<Abstract type="html">If true, then single long page is generated</Abstract>
				</Parameter><Parameter>
					<Name>transformerKey</Name>
					<Abstract type="html">Used when requesting a report as a JasperPrint object.  The parameter allows JRS web services to leverage JR generic print element transformers (net.sf.jasperreports.engine.export.GenericElementTransformer).  Such transformers are pluggable as JR extensions</Abstract>
				</Parameter><Parameter>
					<Name>pages</Name>
					<Abstract type="html">Single page number of pages range in a format &quot;{startPageNumber}-{endPageNumber}&quot;</Abstract>
				</Parameter><Parameter>
					<Name>attachmentsPrefix</Name>
					<Abstract type="html">URL prefix for report attachments. This parameter matter for HTML output only. Placeholders {contextPath}, {reportExecutionId} and {exportOptions} can be used. They are replaced in runtime by corresponding values</Abstract>
				</Parameter><Parameter>
					<Name>parameters</Name>
					<Abstract type="html">List of input control parameters</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/runReportExecution:async:outputFormat:interactive:freshData:saveDataSnapshot:ignorePagination:transformerKey:pages:attachmentsPrefix:parameters:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/cancelReportExecution:completionBlock:</TokenIdentifier>
			<Abstract type="html">Cancel Report Execution</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)cancelReportExecution:(NSString *)requestId completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestId</Name>
					<Abstract type="html">A &lt;b&gt;requestId&lt;/b&gt; parameter of the report execution response</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cancelReportExecution:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/runExportExecution:outputFormat:pages:attachmentsPrefix:completionBlock:</TokenIdentifier>
			<Abstract type="html">Run Export Execution</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)runExportExecution:(NSString *)requestId outputFormat:(NSString *)outputFormat pages:(NSString *)pages attachmentsPrefix:(NSString *)attachmentsPrefix completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestId</Name>
					<Abstract type="html">A &lt;b&gt;requestId&lt;/b&gt; parameter of the report execution response</Abstract>
				</Parameter><Parameter>
					<Name>outputFormat</Name>
					<Abstract type="html">Report output format (e.g. html, pdf etc.)</Abstract>
				</Parameter><Parameter>
					<Name>pages</Name>
					<Abstract type="html">Single page number of pages range in a format &quot;{startPageNumber}-{endPageNumber}&quot;</Abstract>
				</Parameter><Parameter>
					<Name>attachmentsPrefix</Name>
					<Abstract type="html">URL prefix for report attachments. This parameter matter for HTML output only. Placeholders {contextPath}, {reportExecutionId} and {exportOptions} can be used. They are replaced in runtime by corresponding values</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/runExportExecution:outputFormat:pages:attachmentsPrefix:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/generateReportOutputUrl:exportOutput:</TokenIdentifier>
			<Abstract type="html">Generates the report output url</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (NSString *)generateReportOutputUrl:(NSString *)requestId exportOutput:(NSString *)exportOutput</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestId</Name>
					<Abstract type="html">A &lt;b&gt;requestId&lt;/b&gt; parameter of the report execution response</Abstract>
				</Parameter><Parameter>
					<Name>exportOutput</Name>
					<Abstract type="html">Export parameters as string in the correct format: {reportFormat};pages={pageOrPagesRange};attachmentsPrefix={attachmentsPrefixUrlEncodedValue}</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A generated report output url</Abstract></ReturnValue>
			<Anchor>//api/name/generateReportOutputUrl:exportOutput:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/reportExecutionMetadataForRequestId:completionBlock:</TokenIdentifier>
			<Abstract type="html">Gets report execution metadata by request id</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)reportExecutionMetadataForRequestId:(NSString *)requestId completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestId</Name>
					<Abstract type="html">A &lt;b&gt;requestId&lt;/b&gt; parameter of the report execution response</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/reportExecutionMetadataForRequestId:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/reportExecutionStatusForRequestId:completionBlock:</TokenIdentifier>
			<Abstract type="html">Gets report execution status by request id</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)reportExecutionStatusForRequestId:(NSString *)requestId completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestId</Name>
					<Abstract type="html">A &lt;b&gt;requestId&lt;/b&gt; parameter of the report execution response</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/reportExecutionStatusForRequestId:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/loadReportOutput:exportOutput:loadForSaving:path:completionBlock:</TokenIdentifier>
			<Abstract type="html">Loads report output and saves it by specified path if needed</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)loadReportOutput:(NSString *)requestId exportOutput:(NSString *)exportOutput loadForSaving:(BOOL)loadForSaving path:(NSString *)path completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestId</Name>
					<Abstract type="html">A &lt;b&gt;requestId&lt;/b&gt; parameter of the report execution response</Abstract>
				</Parameter><Parameter>
					<Name>exportOutput</Name>
					<Abstract type="html">Export parameters as string:
    - for JRS version smaller 5.6.0 it should be in the follow format: {reportFormat};pages={pageOrPagesRange};attachmentsPrefix={attachmentsPrefixUrlEncodedValue};
    - for JRS version 5.6.0 and greater it should be GUID string; @param loadForSaving If TRUE, report output will be saved by path</Abstract>
				</Parameter><Parameter>
					<Name>loadForSaving</Name>
					<Abstract type="html">If TRUE, report output will be saved by path</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path where the report output will be saved. Ignored, if loadForSaving is FALSE.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadReportOutput:exportOutput:loadForSaving:path:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/JSRESTBase/saveReportAttachment:exportOutput:attachmentName:path:completionBlock:</TokenIdentifier>
			<Abstract type="html">Downloads report attachment and saves it by specified path</Abstract>
			<DeclaredIn>JSRESTBase+JSRESTReport.h</DeclaredIn>
			
			<Declaration>- (void)saveReportAttachment:(NSString *)requestId exportOutput:(NSString *)exportOutput attachmentName:(NSString *)attachmentName path:(NSString *)path completionBlock:(JSRequestCompletionBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>requestId</Name>
					<Abstract type="html">A &lt;b&gt;requestId&lt;/b&gt; parameter of the report execution response</Abstract>
				</Parameter><Parameter>
					<Name>exportOutput</Name>
					<Abstract type="html">Export parameters as string in the correct format: {reportFormat};pages={pageOrPagesRange};attachmentsPrefix={attachmentsPrefixUrlEncodedValue}</Abstract>
				</Parameter><Parameter>
					<Name>attachmentName</Name>
					<Abstract type="html">A name of report attachment</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path where the report output will be saved</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to inform of the results</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveReportAttachment:exportOutput:attachmentName:path:completionBlock:</Anchor>
            <NodeRef refid="22"/>
		</Token>
		
        
        
	</File>
</Tokens>