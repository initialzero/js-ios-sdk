<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKObjectMappingMatcher.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKObjectMappingMatcher</TokenIdentifier>
			<Abstract type="html">The RKObjectMappingMatcher class provides an interface for encapsulating the selection of an object mapping based on runtime values. Matcher objects may be configured by key path and expected value or with a predicate object.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
            
			
			<NodeRef refid="77"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectMappingMatcher/matcherWithKeyPath:expectedValue:objectMapping:</TokenIdentifier>
			<Abstract type="html">Creates and returns a key path matcher object with a given key path, expected value, and an object mapping that applies in the event of a positive match.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>+ (instancetype)matcherWithKeyPath:(NSString *)keyPath expectedValue:(id)expectedValue objectMapping:(RKObjectMapping *)objectMapping</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The key path to obtain the comparison value from the object being matched via valueForKeyPath:.</Abstract>
				</Parameter><Parameter>
					<Name>expectedValue</Name>
					<Abstract type="html">The value that is expected to be read from keyPath if there is a match.</Abstract>
				</Parameter><Parameter>
					<Name>objectMapping</Name>
					<Abstract type="html">The object mapping object that applies if the comparison value is equal to the expected value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given key path, expected value, and object mapping.</Abstract></ReturnValue>
			<Anchor>//api/name/matcherWithKeyPath:expectedValue:objectMapping:</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectMappingMatcher/matcherWithKeyPath:expectedClass:objectMapping:</TokenIdentifier>
			<Abstract type="html">Creates and returns a key path matcher object with a given key path, expected class, and an object mapping that applies in the event of a positive match.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>+ (instancetype)matcherWithKeyPath:(NSString *)keyPath expectedClass:(Class)expectedClass objectMapping:(RKObjectMapping *)objectMapping</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The key path to obtain the comparison value from the object being matched via valueForKeyPath:.</Abstract>
				</Parameter><Parameter>
					<Name>expectedClass</Name>
					<Abstract type="html">The Class that is expected to be read from keyPath if there is a match.</Abstract>
				</Parameter><Parameter>
					<Name>objectMapping</Name>
					<Abstract type="html">The object mapping object that applies if the comparison value is equal to the expected value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given key path, expected value, and object mapping.</Abstract></ReturnValue>
			<Anchor>//api/name/matcherWithKeyPath:expectedClass:objectMapping:</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectMappingMatcher/matcherWithKeyPath:expectedValueMap:</TokenIdentifier>
			<Abstract type="html">Creates and returns a key path matcher object with a given key path, and a map of expected values to associated RKObjectMapping objects that applies in the event of a positive match with its associated value.  This method can evaluate the keyPath once</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>+ (instancetype)matcherWithKeyPath:(NSString *)keyPath expectedValueMap:(NSDictionary *)valueToObjectMapping</Declaration>
			<Parameters>
				<Parameter>
					<Name>keyPath</Name>
					<Abstract type="html">The key path to obtain the comparison value from the object being matched via valueForKeyPath:.</Abstract>
				</Parameter><Parameter>
					<Name>objectMapping</Name>
					<Abstract type="html">The object mapping object that applies if the comparison value is equal to the expected value.</Abstract>
				</Parameter><Parameter>
					<Name>expectedValue</Name>
					<Abstract type="html">The value that is expected to be read from keyPath if there is a match.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given key path and expected value map.</Abstract></ReturnValue>
			<Anchor>//api/name/matcherWithKeyPath:expectedValueMap:</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectMappingMatcher/matcherWithPredicate:objectMapping:</TokenIdentifier>
			<Abstract type="html">Creates and returns a predicate matcher object with a given predicate and an object mapping that applies in the predicate evaluates positively.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>+ (instancetype)matcherWithPredicate:(NSPredicate *)predicate objectMapping:(RKObjectMapping *)objectMapping</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">The predicate with which to evaluate the matched object.</Abstract>
				</Parameter><Parameter>
					<Name>objectMapping</Name>
					<Abstract type="html">The object mapping object that applies if the predicate evaluates positively for the matched object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given key path, expected value, and object mapping.</Abstract></ReturnValue>
			<Anchor>//api/name/matcherWithPredicate:objectMapping:</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKObjectMappingMatcher/matcherWithPossibleMappings:block:</TokenIdentifier>
			<Abstract type="html">Creates and returns a matcher object with a given block which returns the RKObjectMapping instance to use, and an optional array of possible object mappings which could be returned.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>+ (instancetype)matcherWithPossibleMappings:(NSArray *)mappings block:(RKObjectMapping *( ^ ) ( id representation ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block with which to evaluate the matched object, and return the object mapping to use.  Return nil if no match (i.e. a NO return from the matches: method).</Abstract>
				</Parameter><Parameter>
					<Name>possibleMappings</Name>
					<Abstract type="html">The list of known possible RKObjectMapping instances which could be returned.  This is used to aid RKDynamicMapping&apos;s -objectMappings method which is used in some instances, but is not required for mapping.  The block could return a new instance if needed.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The receiver, initialized with the given block ans possible mappings.</Abstract></ReturnValue>
			<Anchor>//api/name/matcherWithPossibleMappings:block:</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectMappingMatcher/setPossibleObjectMappings:</TokenIdentifier>
			<Abstract type="html">Returns the list of all known RKObjectMapping instances which could be returned from this matcher.  This is called when added to or removed from an RKDynamicMapping, and is used to populate the objectMappings property there.  The default implementation returns the single value set in the objectMapping property, so if that is the only possibility then this method does not need to be overridden.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *possibleObjectMappings</Declaration>
			
			
			<Anchor>//api/name/possibleObjectMappings</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectMappingMatcher/possibleObjectMappings</TokenIdentifier>
			<Abstract type="html">Returns the list of all known RKObjectMapping instances which could be returned from this matcher.  This is called when added to or removed from an RKDynamicMapping, and is used to populate the objectMappings property there.  The default implementation returns the single value set in the objectMapping property, so if that is the only possibility then this method does not need to be overridden.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *possibleObjectMappings</Declaration>
			
			
			<Anchor>//api/name/possibleObjectMappings</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectMappingMatcher/possibleObjectMappings</TokenIdentifier>
			<Abstract type="html">Returns the list of all known RKObjectMapping instances which could be returned from this matcher.  This is called when added to or removed from an RKDynamicMapping, and is used to populate the objectMappings property there.  The default implementation returns the single value set in the objectMapping property, so if that is the only possibility then this method does not need to be overridden.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSArray *possibleObjectMappings</Declaration>
			
			
			<Anchor>//api/name/possibleObjectMappings</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectMappingMatcher/setObjectMapping:</TokenIdentifier>
			<Abstract type="html">The object mapping object that applies when the receiver matches a given object.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RKObjectMapping *objectMapping</Declaration>
			
			
			<Anchor>//api/name/objectMapping</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectMappingMatcher/objectMapping</TokenIdentifier>
			<Abstract type="html">The object mapping object that applies when the receiver matches a given object.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RKObjectMapping *objectMapping</Declaration>
			
			
			<Anchor>//api/name/objectMapping</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKObjectMappingMatcher/objectMapping</TokenIdentifier>
			<Abstract type="html">The object mapping object that applies when the receiver matches a given object.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) RKObjectMapping *objectMapping</Declaration>
			
			
			<Anchor>//api/name/objectMapping</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKObjectMappingMatcher/matches:</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value that indicates if the given object matches the expectations of the receiver.</Abstract>
			<DeclaredIn>RKObjectMappingMatcher.h</DeclaredIn>
			
			<Declaration>- (BOOL)matches:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">The object to be evaluated.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the object matches the expectations of the receiver, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/matches:</Anchor>
            <NodeRef refid="77"/>
		</Token>
		
        
        
	</File>
</Tokens>