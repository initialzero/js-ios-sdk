<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TKEvent.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TKEvent</TokenIdentifier>
			<Abstract type="html">The TKEvent class describes an event within a state machine that causes a transition between states. Each event has a descriptive name and specifies the state that the machine will transition into after the event has been fired. Events can optionally be constrained to a set of source states that the machine must be in for the event to fire.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
            
			
			<NodeRef refid="105"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TKEvent/eventWithName:transitioningFromStates:toState:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new event object with the given name, source states, and destination state.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>+ (instancetype)eventWithName:(NSString *)name transitioningFromStates:(NSArray *)sourceStates toState:(TKState *)destinationState</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name for the event.</Abstract>
				</Parameter><Parameter>
					<Name>sourceStates</Name>
					<Abstract type="html">An array of TKState objects specifying the source states that the machine must be in for the event to be permitted to fire.</Abstract>
				</Parameter><Parameter>
					<Name>destinationState</Name>
					<Abstract type="html">The state that the state machine will transition into after the event has fired.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A newly created event object.</Abstract></ReturnValue>
			<Anchor>//api/name/eventWithName:transitioningFromStates:toState:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKEvent/setSourceStates:</TokenIdentifier>
			<Abstract type="html">An optional array of states that the state machine must be in before the event is allowed to fire.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSArray *sourceStates</Declaration>
			
			
			<Anchor>//api/name/sourceStates</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKEvent/sourceStates</TokenIdentifier>
			<Abstract type="html">An optional array of states that the state machine must be in before the event is allowed to fire.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSArray *sourceStates</Declaration>
			
			
			<Anchor>//api/name/sourceStates</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKEvent/sourceStates</TokenIdentifier>
			<Abstract type="html">An optional array of states that the state machine must be in before the event is allowed to fire.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSArray *sourceStates</Declaration>
			
			
			<Anchor>//api/name/sourceStates</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKEvent/setDestinationState:</TokenIdentifier>
			<Abstract type="html">The state that the state machine will transition into after the event has fired.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) TKState *destinationState</Declaration>
			
			
			<Anchor>//api/name/destinationState</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKEvent/destinationState</TokenIdentifier>
			<Abstract type="html">The state that the state machine will transition into after the event has fired.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) TKState *destinationState</Declaration>
			
			
			<Anchor>//api/name/destinationState</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TKEvent/destinationState</TokenIdentifier>
			<Abstract type="html">The state that the state machine will transition into after the event has fired.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) TKState *destinationState</Declaration>
			
			
			<Anchor>//api/name/destinationState</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKEvent/setShouldFireEventBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed in order to determines if an event should be fired. If the block returns YES, then the event will be permitted to fire.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>- (void)setShouldFireEventBlock:(BOOL ( ^ ) ( TKEvent *event , TKTransition *transition ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be executed to determine if the event can be fired. The block has a Boolean return value and accepts two arguments: the event that is being evaluated to determine if it can be fired and its associated transition. If the block returns YES, then the event can be fired.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setShouldFireEventBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKEvent/setWillFireEventBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed before an event is fired, while the state machine is still in the source state.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>- (void)setWillFireEventBlock:(void ( ^ ) ( TKEvent *event , TKTransition *transition ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be executed. The block has no return value and accepts two arguments: the event that is about to be fired and its associated transition.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setWillFireEventBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TKEvent/setDidFireEventBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed after an event is fired, when the state machine has transitioned into the destination state.</Abstract>
			<DeclaredIn>TKEvent.h</DeclaredIn>
			
			<Declaration>- (void)setDidFireEventBlock:(void ( ^ ) ( TKEvent *event , TKTransition *transition ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">The block to be executed. The block has no return value and accepts two arguments: the event that has just been fired and its associated transition.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDidFireEventBlock:</Anchor>
            <NodeRef refid="105"/>
		</Token>
		
        
        
	</File>
</Tokens>