<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/RKRoute.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/RKRoute</TokenIdentifier>
			<Abstract type="html">The RKRoute class models a single routable path pattern in use by the application. A route can be combined with an NSURL base URL and interpolated with an object to produce a new fully hydrated URL object. Routes are always instantiated with a path pattern and metadata to provide for the subsequent identification of the defined route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
            
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/RKRouter</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/RKRouteSet</TokenIdentifier>
		
	</RelatedTokens>
	
			<NodeRef refid="97"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKRoute/routeWithName:pathPattern:method:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new named route object with the given name, path pattern and method.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>+ (instancetype)routeWithName:(NSString *)name pathPattern:(NSString *)pathPattern method:(RKRequestMethod)method</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">A unique identifying name for the route.</Abstract>
				</Parameter><Parameter>
					<Name>pathPattern</Name>
					<Abstract type="html">A SOCKit pattern describing the format of URL paths generated from the route.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">The request method of the route. The method given must specify a single HTTP method to be used for requests using the route.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new named route object with the given name, path pattern and request method.
@raise NSInvalidArgumentException Raised if the given HTTP request method is not an exact match of the RKRequestMethod enum</Abstract></ReturnValue>
			<Anchor>//api/name/routeWithName:pathPattern:method:</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKRoute/routeWithClass:pathPattern:method:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new class route object with the given object class, path pattern and method.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>+ (instancetype)routeWithClass:(Class)objectClass pathPattern:(NSString *)pathPattern method:(RKRequestMethod)method</Declaration>
			<Parameters>
				<Parameter>
					<Name>objectClass</Name>
					<Abstract type="html">The class that is represented by the route.</Abstract>
				</Parameter><Parameter>
					<Name>pathPattern</Name>
					<Abstract type="html">A SOCKit pattern describing the format of URL paths generated from the route.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">The request method of the route. More than one method may be specified via a bitwise OR.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new class route object with the given object class, path pattern and request method.</Abstract></ReturnValue>
			<Anchor>//api/name/routeWithClass:pathPattern:method:</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/RKRoute/routeWithRelationshipName:objectClass:pathPattern:method:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new relationship route object with the given relationship name, object class, path pattern and method.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>+ (instancetype)routeWithRelationshipName:(NSString *)name objectClass:(Class)objectClass pathPattern:(NSString *)pathPattern method:(RKRequestMethod)method</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the relationship represented by the route.</Abstract>
				</Parameter><Parameter>
					<Name>objectClass</Name>
					<Abstract type="html">The class containing the relationship represented by the route.</Abstract>
				</Parameter><Parameter>
					<Name>pathPattern</Name>
					<Abstract type="html">A SOCKit pattern describing the format of URL paths generated from the route.</Abstract>
				</Parameter><Parameter>
					<Name>method</Name>
					<Abstract type="html">The request method of the route. More than one method may be specified via a bitwise OR.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new class route object with the given object class, path pattern and request method.</Abstract></ReturnValue>
			<Anchor>//api/name/routeWithRelationshipName:objectClass:pathPattern:method:</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setName:</TokenIdentifier>
			<Abstract type="html">The name of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/name</TokenIdentifier>
			<Abstract type="html">The name of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/name</TokenIdentifier>
			<Abstract type="html">The name of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setObjectClass:</TokenIdentifier>
			<Abstract type="html">The object class of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) Class objectClass</Declaration>
			
			
			<Anchor>//api/name/objectClass</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/objectClass</TokenIdentifier>
			<Abstract type="html">The object class of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) Class objectClass</Declaration>
			
			
			<Anchor>//api/name/objectClass</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/objectClass</TokenIdentifier>
			<Abstract type="html">The object class of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) Class objectClass</Declaration>
			
			
			<Anchor>//api/name/objectClass</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setMethod:</TokenIdentifier>
			<Abstract type="html">The request method of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) RKRequestMethod method</Declaration>
			
			
			<Anchor>//api/name/method</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/method</TokenIdentifier>
			<Abstract type="html">The request method of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) RKRequestMethod method</Declaration>
			
			
			<Anchor>//api/name/method</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/method</TokenIdentifier>
			<Abstract type="html">The request method of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) RKRequestMethod method</Declaration>
			
			
			<Anchor>//api/name/method</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setPathPattern:</TokenIdentifier>
			<Abstract type="html">The path pattern of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *pathPattern</Declaration>
			
			
			<Anchor>//api/name/pathPattern</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/pathPattern</TokenIdentifier>
			<Abstract type="html">The path pattern of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *pathPattern</Declaration>
			
			
			<Anchor>//api/name/pathPattern</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/pathPattern</TokenIdentifier>
			<Abstract type="html">The path pattern of the receiver.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) NSString *pathPattern</Declaration>
			
			
			<Anchor>//api/name/pathPattern</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setShouldEscapePath:</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the path pattern should be escaped when evaluated.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL shouldEscapePath</Declaration>
			
			
			<Anchor>//api/name/shouldEscapePath</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/shouldEscapePath</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the path pattern should be escaped when evaluated.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL shouldEscapePath</Declaration>
			
			
			<Anchor>//api/name/shouldEscapePath</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/shouldEscapePath</TokenIdentifier>
			<Abstract type="html">A Boolean value that determines if the path pattern should be escaped when evaluated.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL shouldEscapePath</Declaration>
			
			
			<Anchor>//api/name/shouldEscapePath</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setNamedRoute:</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a named route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isNamedRoute, readonly) BOOL namedRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a named route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/namedRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/isNamedRoute</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a named route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isNamedRoute, readonly) BOOL namedRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a named route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/namedRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/namedRoute</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a named route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isNamedRoute, readonly) BOOL namedRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a named route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/namedRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setClassRoute:</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a class route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isClassRoute, readonly) BOOL classRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a class route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/classRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/isClassRoute</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a class route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isClassRoute, readonly) BOOL classRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a class route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/classRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/classRoute</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a class route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isClassRoute, readonly) BOOL classRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a class route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/classRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/setRelationshipRoute:</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a relationship route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRelationshipRoute, readonly) BOOL relationshipRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a relationship route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/relationshipRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/RKRoute/isRelationshipRoute</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a relationship route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRelationshipRoute, readonly) BOOL relationshipRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a relationship route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/relationshipRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/RKRoute/relationshipRoute</TokenIdentifier>
			<Abstract type="html">Determines if the receiver is a relationship route.</Abstract>
			<DeclaredIn>RKRoute.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, getter=isRelationshipRoute, readonly) BOOL relationshipRoute</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver is a relationship route, else NO.</Abstract></ReturnValue>
			<Anchor>//api/name/relationshipRoute</Anchor>
            <NodeRef refid="97"/>
		</Token>
		
        
        
	</File>
</Tokens>